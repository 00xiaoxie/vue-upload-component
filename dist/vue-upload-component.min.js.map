{"version":3,"file":"vue-upload-component.min.js","sources":["../src/utils/request.js","../src/chunk/ChunkUploadHandler.js","../src/InputFile.vue","../src/FileUpload.vue"],"sourcesContent":["/**\n * Creates a XHR request\n *\n * @param {Object} options\n */\nexport const createRequest = (options) => {\n  const xhr = new XMLHttpRequest()\n  xhr.responseType = 'json'\n  xhr.open(options.method || 'GET', options.url)\n  if (options.headers) {\n    Object.keys(options.headers).forEach(key => {\n      xhr.setRequestHeader(key, options.headers[key])\n    })\n  }\n\n  return xhr\n}\n\n/**\n * Sends a XHR request with certain body\n *\n * @param {XMLHttpRequest} xhr\n * @param {Object} body\n */\nexport const sendRequest = (xhr, body) => {\n  return new Promise((resolve, reject) => {\n    xhr.onload = () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        resolve(xhr.response)\n      } else {\n        reject(xhr.statusText)\n      }\n    }\n    xhr.onerror = () => reject(xhr.statusText)\n    xhr.send(JSON.stringify(body))\n  })\n}\n\n/**\n * Creates and sends XHR request\n *\n * @param {Object} options\n *\n * @returns Promise\n */\nexport default function (options) {\n  const xhr = createRequest(options)\n\n  return sendRequest(xhr, options.body)\n}\n","import { default as request, createRequest, sendRequest } from '../utils/request'\n\nexport default class ChunkUploadHandler {\n  /**\n   * Constructor\n   *\n   * @param {File} file\n   * @param {Object} options\n   */\n  constructor (file, options) {\n    this.file = file\n    this.options = options\n  }\n\n  /**\n   * Gets the max retries from options\n   */\n  get maxRetries () {\n    return parseInt(this.options.maxRetries)\n  }\n\n  /**\n   * Gets the max number of active chunks being uploaded at once from options\n   */\n  get maxActiveChunks () {\n    return parseInt(this.options.maxActive)\n  }\n\n  /**\n   * Gets the file type\n   */\n  get fileType () {\n    return this.file.type\n  }\n\n  /**\n   * Gets the file size\n   */\n  get fileSize () {\n    return this.file.size\n  }\n\n  /**\n   * Gets action (url) to upload the file\n   */\n  get action () {\n    return this.options.action || null\n  }\n\n  /**\n   * Gets the body to be merged when sending the request in start phase\n   */\n  get startBody () {\n    return this.options.startBody || {}\n  }\n\n  /**\n   * Gets the body to be merged when sending the request in upload phase\n   */\n  get uploadBody () {\n    return this.options.uploadBody || {}\n  }\n\n  /**\n   * Gets the body to be merged when sending the request in finish phase\n   */\n  get finishBody () {\n    return this.options.finishBody || {}\n  }\n\n  /**\n   * Gets the headers of the requests from options\n   */\n  get headers () {\n    return this.options.headers || {}\n  }\n\n  /**\n   * Whether it's ready to upload files or not\n   */\n  get readyToUpload () {\n    return !!this.chunks\n  }\n\n  /**\n   * Gets the progress of the chunk upload\n   * - Gets all the completed chunks\n   * - Gets the progress of all the chunks that are being uploaded\n   */\n  get progress () {\n    const completedProgress = (this.chunksUploaded.length / this.chunks.length) * 100\n    const uploadingProgress = this.chunksUploading.reduce((progress, chunk) => {\n      return progress + ((chunk.progress | 0) / this.chunks.length)\n    }, 0)\n\n    return Math.min(completedProgress + uploadingProgress, 100)\n  }\n\n  /**\n   * Gets all the chunks that are pending to be uploaded\n   */\n  get chunksToUpload () {\n    return this.chunks.filter(chunk => {\n      return !chunk.active && !chunk.uploaded\n    })\n  }\n\n  /**\n   * Whether there are chunks to upload or not\n   */\n  get hasChunksToUpload () {\n    return this.chunksToUpload.length > 0\n  }\n\n  /**\n   * Gets all the chunks that are uploading\n   */\n  get chunksUploading () {\n    return this.chunks.filter(chunk => {\n      return !!chunk.xhr && !!chunk.active\n    })\n  }\n\n  /**\n   * Gets all the chunks that have finished uploading\n   */\n  get chunksUploaded () {\n    return this.chunks.filter(chunk => {\n      return !!chunk.uploaded\n    })\n  }\n\n  /**\n   * Creates all the chunks in the initial state\n   */\n  createChunks () {\n    this.chunks = []\n\n    let start = 0\n    let end = this.chunkSize\n    while (start < this.fileSize) {\n      this.chunks.push({\n        blob: this.file.file.slice(start, end),\n        startOffset: start,\n        active: false,\n        retries: this.maxRetries\n      })\n      start = end\n      end = start + this.chunkSize\n    }\n  }\n\n  /**\n   * Updates the progress of the file with the handler's progress\n   */\n  updateFileProgress () {\n    this.file.progress = this.progress\n  }\n\n  /**\n   * Paues the upload process\n   * - Stops all active requests\n   * - Sets the file not active\n   */\n  pause () {\n    this.file.active = false\n    this.chunksUploading.forEach(chunk => {\n      chunk.xhr.abort()\n      chunk.active = false\n    })\n  }\n\n  /**\n   * Resumes the file upload\n   * - Sets the file active\n   * - Starts the following chunks\n   */\n  resume () {\n    this.file.active = true\n    this.startChunking()\n  }\n\n  /**\n   * Starts the file upload\n   *\n   * @returns Promise\n   * - resolve  The file was uploaded\n   * - reject   The file upload failed\n   */\n  upload () {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve\n      this.reject = reject\n    })\n    this.start()\n\n    return this.promise\n  }\n\n  /**\n   * Start phase\n   * Sends a request to the backend to initialise the chunks\n   */\n  start () {\n    request({\n      method: 'POST',\n      headers: this.headers,\n      url: this.action,\n      body: Object.assign(this.startBody, {\n        phase: 'start',\n        mime_type: this.fileType,\n        size: this.fileSize\n      })\n    }).then(res => {\n      if (res.status !== 'success') {\n        return this.reject(res.message)\n      }\n\n      this.sessionId = res.data.session_id\n      this.chunkSize = res.data.end_offset\n\n      this.createChunks()\n      this.startChunking()\n    }).catch(error => this.reject(error))\n  }\n\n  /**\n   * Starts to upload chunks\n   */\n  startChunking () {\n    for (let i = 0; i < this.maxActiveChunks; i++) {\n      this.uploadNextChunk()\n    }\n  }\n\n  /**\n   * Uploads the next chunk\n   * - Won't do anything if the process is paused\n   * - Will start finish phase if there are no more chunks to upload\n   */\n  uploadNextChunk () {\n    if (this.file.active) {\n      if (this.hasChunksToUpload) {\n        return this.uploadChunk(this.chunksToUpload[0])\n      }\n\n      if (this.chunksUploading.length === 0) {\n        return this.finish()\n      }\n    }\n  }\n\n  /**\n   * Uploads a chunk\n   * - Sends the chunk to the backend\n   * - Sets the chunk as uploaded if everything went well\n   * - Decreases the number of retries if anything went wrong\n   * - Fails if there are no more retries\n   *\n   * @param {Object} chunk\n   */\n  uploadChunk (chunk) {\n    chunk.progress = 0\n    chunk.active = true\n    this.updateFileProgress()\n    chunk.xhr = createRequest({\n      method: 'POST',\n      headers: this.headers,\n      url: this.action\n    })\n\n    chunk.xhr.upload.addEventListener('progress', function(evt) {\n      if (evt.lengthComputable) {\n        chunk.progress = Math.round(evt.loaded / evt.total * 100)\n      }\n    }, false)\n\n    sendRequest(chunk.xhr, Object.assign(this.uploadBody, {\n      phase: 'upload',\n      session_id: this.sessionId,\n      start_offset: chunk.startOffset,\n      chunk: chunk.blob\n    })).then(res => {\n      chunk.active = false\n      if (res.status === 'success') {\n        chunk.uploaded = true\n      } else {\n        if (chunk.retries-- <= 0) {\n          this.pause()\n          return this.reject('File upload failed')\n        }\n      }\n\n      this.uploadNextChunk()\n    }).catch(() => {\n      chunk.active = false\n      if (chunk.retries-- <= 0) {\n        this.pause()\n        return this.reject('File upload failed')\n      }\n\n      this.uploadNextChunk()\n    })\n  }\n\n  /**\n   * Finish phase\n   * Sends a request to the backend to finish the process\n   */\n  finish () {\n    this.updateFileProgress()\n\n    request({\n      method: 'POST',\n      headers: this.headers,\n      url: this.action,\n      body: Object.assign(this.finishBody, {\n        phase: 'finish',\n        session_id: this.sessionId\n      })\n    }).then(res => {\n      if (res.status !== 'success') {\n        return this.reject(res.message)\n      }\n\n      this.resolve(res)\n    }).catch(error => this.reject(error))\n  }\n}\n","<template>\n  <input\n    type=\"file\"\n    :name=\"$parent.name\"\n    :id=\"$parent.inputId || $parent.name\"\n    :accept=\"$parent.accept\"\n    @change=\"change\"\n    :webkitdirectory=\"$parent.directory && $parent.features.directory\"\n    :directory=\"$parent.directory && $parent.features.directory\"\n    :multiple=\"$parent.multiple && $parent.features.html5\"\n  />\n</template>\n<script>\nexport default {\n  methods: {\n    change(e) {\n      this.$destroy()\n      this.$parent.addInputFile(e.target)\n      // eslint-disable-next-line\n      new this.constructor({\n        parent: this.$parent,\n        el: this.$el,\n      })\n    }\n  }\n}\n</script>\n","<template>\n  <label :class=\"className\">\n    <slot></slot>\n    <input-file></input-file>\n  </label>\n</template>\n<style>\n.file-uploads {\n  overflow: hidden;\n  position: relative;\n  text-align: center;\n  display: inline-block;\n}\n.file-uploads.file-uploads-html4 input[type=\"file\"] {\n  opacity: 0;\n  font-size: 20em;\n  z-index: 1;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n.file-uploads.file-uploads-html5 input[type=\"file\"] {\n  overflow: hidden;\n  position: fixed;\n  width: 1px;\n  height: 1px;\n  z-index: -1;\n  opacity: 0;\n}\n</style>\n<script>\nimport ChunkUploadDefaultHandler from './chunk/ChunkUploadHandler'\nimport InputFile from './InputFile.vue'\n\nconst CHUNK_DEFAULT_OPTIONS = {\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  action: '',\n  minSize: 1048576,\n  maxActive: 3,\n  maxRetries: 5,\n\n  handler: ChunkUploadDefaultHandler\n}\n\nexport default {\n  components: {\n    InputFile,\n  },\n  props: {\n    inputId: {\n      type: String,\n    },\n\n    name: {\n      type: String,\n      default: 'file',\n    },\n\n    accept: {\n      type: String,\n    },\n\n    multiple: {\n      type: Boolean,\n    },\n\n    maximum: {\n      type: Number,\n      default() {\n        return this.multiple ? 0 : 1\n      }\n    },\n\n    addIndex: {\n      type: [Boolean, Number],\n    },\n\n    directory: {\n      type: Boolean,\n    },\n\n    postAction: {\n      type: String,\n    },\n\n    putAction: {\n      type: String,\n    },\n\n    headers: {\n      type: Object,\n      default: Object,\n    },\n\n    data: {\n      type: Object,\n      default: Object,\n    },\n\n    timeout: {\n      type: Number,\n      default: 0,\n    },\n\n\n    drop: {\n      default: false,\n    },\n\n    dropDirectory: {\n      type: Boolean,\n      default: true,\n    },\n\n    size: {\n      type: Number,\n      default: 0,\n    },\n\n    extensions: {\n      default: Array,\n    },\n\n\n    value: {\n      type: Array,\n      default: Array,\n    },\n\n    thread: {\n      type: Number,\n      default: 1,\n    },\n\n    // Chunk upload enabled\n    chunkEnabled: {\n      type: Boolean,\n      default: false\n    },\n\n    // Chunk upload properties\n    chunk: {\n      type: Object,\n      default: () => {\n        return CHUNK_DEFAULT_OPTIONS\n      }\n    }\n  },\n\n  data() {\n    return {\n      files: this.value,\n      features: {\n        html5: true,\n        directory: false,\n        drag: false,\n      },\n\n      active: false,\n      dropActive: false,\n\n      uploading: 0,\n\n      destroy: false,\n    }\n  },\n\n\n  /**\n   * mounted\n   * @return {[type]} [description]\n   */\n  mounted() {\n    let input = document.createElement('input')\n    input.type = 'file'\n    input.multiple = true\n\n    // html5 特征\n    if (window.FormData && input.files) {\n      // 上传目录特征\n      if (typeof input.webkitdirectory === 'boolean' || typeof input.directory === 'boolean') {\n        this.features.directory = true\n      }\n\n      // 拖拽特征\n      if (this.features.html5 && typeof input.ondrop !== 'undefined') {\n        this.features.drop = true\n      }\n    } else {\n      this.features.html5 = false\n    }\n\n    // files 定位缓存\n    this.maps = {}\n\n    this.$nextTick(function () {\n\n      // 更新下父级\n      if (this.$parent) {\n        this.$parent.$forceUpdate()\n      }\n\n      // 拖拽渲染\n      this.watchDrop(this.drop)\n    })\n  },\n\n  /**\n   * beforeDestroy\n   * @return {[type]} [description]\n   */\n  beforeDestroy() {\n    // 已销毁\n    this.destroy = true\n\n    // 设置成不激活\n    this.active = false\n  },\n\n  computed: {\n    /**\n     * uploading 正在上传的线程\n     * @return {[type]} [description]\n     */\n\n    /**\n     * uploaded 文件列表是否全部已上传\n     * @return {[type]} [description]\n     */\n    uploaded() {\n      let file\n      for (let i = 0; i < this.files.length; i++) {\n        file = this.files[i]\n        if (file.fileObject && !file.error && !file.success) {\n          return false\n        }\n      }\n      return true\n    },\n\n    chunkOptions () {\n      return Object.assign(CHUNK_DEFAULT_OPTIONS, this.chunk)\n    },\n\n    className() {\n      return [\n        'file-uploads',\n        this.features.html5 ? 'file-uploads-html5' : 'file-uploads-html4',\n        this.features.directory && this.directory ? 'file-uploads-directory' : undefined,\n        this.features.drop && this.drop ? 'file-uploads-drop' : undefined,\n      ]\n    }\n  },\n\n\n  watch: {\n    active(active) {\n      this.watchActive(active)\n    },\n\n    dropActive() {\n      if (this.$parent) {\n        this.$parent.$forceUpdate()\n      }\n    },\n\n    drop(value) {\n      this.watchDrop(value)\n    },\n\n    value(files) {\n      if (this.files === files) {\n        return\n      }\n      this.files = files\n\n      let oldMaps = this.maps\n\n      // 重写 maps 缓存\n      this.maps = {}\n      for (let i = 0; i < this.files.length; i++) {\n        let file = this.files[i]\n        this.maps[file.id] = file\n      }\n\n      // add, update\n      for (let key in this.maps) {\n        let newFile = this.maps[key]\n        let oldFile = oldMaps[key]\n        if (newFile !== oldFile) {\n          this.emitFile(newFile, oldFile)\n        }\n      }\n\n      // delete\n      for (let key in oldMaps) {\n        if (!this.maps[key]) {\n          this.emitFile(undefined, oldMaps[key])\n        }\n      }\n    },\n  },\n\n  methods: {\n\n    // 清空\n    clear() {\n      if (this.files.length) {\n        let files = this.files\n        this.files = []\n\n        // 定位\n        this.maps = {}\n\n        // 事件\n        this.emitInput()\n        for (let i = 0; i < files.length; i++) {\n          this.emitFile(undefined, files[i])\n        }\n      }\n      return true\n    },\n\n    // 选择\n    get(id) {\n      if (!id) {\n        return false\n      }\n\n      if (typeof id === 'object') {\n        return this.maps[id.id] || false\n      }\n\n      return this.maps[id] || false\n    },\n\n    // 添加\n    add(_files, index = this.addIndex) {\n      let files = _files\n      let isArray = files instanceof Array\n\n      // 不是数组整理成数组\n      if (!isArray) {\n        files = [files]\n      }\n\n      // 遍历规范对象\n      let addFiles = []\n      for (let i = 0; i < files.length; i++) {\n        let file = files[i]\n        if (this.features.html5 && file instanceof Blob) {\n          file = {\n            file,\n            size: file.size,\n            name: file.webkitRelativePath || file.relativePath || file.name || 'unknown',\n            type: file.type,\n          }\n        }\n        let fileObject = false\n        if (file.fileObject === false) {\n          // false\n        } else if (file.fileObject) {\n          fileObject = true\n        } else if (typeof Element !== 'undefined' && file.el instanceof Element) {\n          fileObject = true\n        } else if (typeof Blob !== 'undefined' && file.file instanceof Blob) {\n          fileObject = true\n        }\n        if (fileObject) {\n          file = {\n            fileObject: true,\n            size: -1,\n            name: 'Filename',\n            type: '',\n            active: false,\n            error: '',\n            success: false,\n            putAction: this.putAction,\n            postAction: this.postAction,\n            timeout: this.timeout,\n            ...file,\n            response: {},\n\n            progress: '0.00',          // 只读\n            speed: 0,                  // 只读\n            // xhr: false,                // 只读\n            // iframe: false,             // 只读\n          }\n\n          file.data = {\n            ...this.data,\n            ...file.data ? file.data : {},\n          }\n\n          file.headers = {\n            ...this.headers,\n            ...file.headers ? file.headers : {},\n          }\n        }\n\n        // 必须包含 id\n        if (!file.id) {\n          file.id = Math.random().toString(36).substr(2)\n        }\n\n        if (this.emitFilter(file, undefined)) {\n          continue\n        }\n\n        // 最大数量限制\n        if (this.maximum > 1 && (addFiles.length + this.files.length) >= this.maximum) {\n          break\n        }\n\n        addFiles.push(file)\n\n        // 最大数量限制\n        if (this.maximum === 1) {\n          break\n        }\n      }\n\n      // 没有文件\n      if (!addFiles.length) {\n        return false\n      }\n\n      // 如果是 1 清空\n      if (this.maximum === 1) {\n        this.clear()\n      }\n\n\n      // 添加进去 files\n      let newFiles\n      if (index === true || index === 0) {\n        newFiles = addFiles.concat(this.files)\n      } else if (index) {\n        newFiles = addFiles.concat([])\n        newFiles.splice(index, 0, addFiles)\n      } else {\n        newFiles = this.files.concat(addFiles)\n      }\n\n      this.files = newFiles\n\n      // 定位\n      for (let i = 0; i < addFiles.length; i++) {\n        let file = addFiles[i]\n        this.maps[file.id] = file\n      }\n\n      // 事件\n      this.emitInput()\n      for (let i = 0; i < addFiles.length; i++) {\n        this.emitFile(addFiles[i], undefined)\n      }\n\n      return isArray ? addFiles : addFiles[0]\n    },\n\n\n\n    // 添加表单文件\n    addInputFile(el) {\n      let files = []\n      if (el.files) {\n        for (let i = 0; i < el.files.length; i++) {\n          let file = el.files[i]\n          files.push({\n            size: file.size,\n            name: file.webkitRelativePath || file.relativePath || file.name,\n            type: file.type,\n            file,\n            el\n          })\n        }\n      } else {\n        files.push({\n          name: el.value.replace(/^.*?([^\\/\\\\\\r\\n]+)$/, '$1'),\n          el,\n        })\n      }\n      return this.add(files)\n    },\n\n\n    // 添加 DataTransfer\n    addDataTransfer(dataTransfer) {\n      let files = []\n      if (dataTransfer.items && dataTransfer.items.length) {\n        let items = []\n        for (let i = 0; i < dataTransfer.items.length; i++) {\n          let item = dataTransfer.items[i]\n          if (item.getAsEntry) {\n            item = item.getAsEntry() || item.getAsFile()\n          } else if (item.webkitGetAsEntry) {\n            item = item.webkitGetAsEntry() || item.getAsFile()\n          } else {\n            item = item.getAsFile()\n          }\n          if (item) {\n            items.push(item)\n          }\n        }\n\n        return new Promise((resolve, reject) => {\n          let forEach = (i) => {\n            let item = items[i]\n            // 结束 文件数量大于 最大数量\n            if (!item || (this.maximum > 0 && files.length >= this.maximum)) {\n              return resolve(this.add(files))\n            }\n            this.getEntry(item).then(function (results) {\n              files.push(...results)\n              forEach(i + 1)\n            })\n          }\n          forEach(0)\n        })\n      }\n\n      if (dataTransfer.files.length) {\n        for (let i = 0; i < dataTransfer.files.length; i++) {\n          files.push(dataTransfer.files[i])\n          if (this.maximum > 0 && files.length >= this.maximum) {\n            break\n          }\n        }\n        return Promise.resolve(this.add(files))\n      }\n\n      return Promise.resolve([])\n    },\n\n\n    // 获得 entry\n    getEntry(entry, path = '') {\n      return new Promise((resolve, reject) => {\n        if (entry.isFile) {\n          entry.file(function (file) {\n            resolve([\n              {\n                size: file.size,\n                name: path + file.name,\n                type: file.type,\n                file,\n              }\n            ])\n          })\n        } else if (entry.isDirectory && this.dropDirectory) {\n          let files = []\n          let dirReader = entry.createReader()\n          let readEntries = () => {\n            dirReader.readEntries((entries) => {\n              let forEach = (i) => {\n                if ((!entries[i] && i === 0) || (this.maximum > 0 && files.length >= this.maximum)) {\n                  return resolve(files)\n                }\n                if (!entries[i]) {\n                  return readEntries()\n                }\n                this.getEntry(entries[i], path + entry.name + '/').then((results) => {\n                  files.push(...results)\n                  forEach(i + 1)\n                })\n              }\n              forEach(0)\n            })\n          }\n          readEntries()\n        } else {\n          resolve([])\n        }\n      })\n    },\n\n\n    replace(id1, id2) {\n      let file1 = this.get(id1)\n      let file2 = this.get(id2)\n      if (!file1 || !file2 || file1 === file2) {\n        return false\n      }\n      let files = this.files.concat([])\n      let index1 = files.indexOf(file1)\n      let index2 = files.indexOf(file2)\n      if (index1 === -1 || index2 === -1) {\n        return false\n      }\n      files[index1] = file2\n      files[index2] = file1\n      this.files = files\n      this.emitInput()\n      return true\n    },\n\n    // 移除\n    remove(id) {\n      let file = this.get(id)\n      if (file) {\n        if (this.emitFilter(undefined, file)) {\n          return false\n        }\n        let files = this.files.concat([])\n        let index = files.indexOf(file)\n        if (index === -1) {\n          console.error('remove', file)\n          return false\n        }\n        files.splice(index, 1)\n        this.files = files\n\n        // 定位\n        delete this.maps[file.id]\n\n        // 事件\n        this.emitInput()\n        this.emitFile(undefined, file)\n      }\n      return file\n    },\n\n    // 更新\n    update(id, data) {\n      let file = this.get(id)\n      if (file) {\n        let newFile = {\n          ...file,\n          ...data\n        }\n        // 停用必须加上错误\n        if (file.fileObject && file.active && !newFile.active && !newFile.error && !newFile.success) {\n          newFile.error = 'abort'\n        }\n\n        if (this.emitFilter(newFile, file)) {\n          return false\n        }\n\n        let files = this.files.concat([])\n        let index = files.indexOf(file)\n        if (index === -1) {\n          console.error('update', file)\n          return false\n        }\n        files.splice(index, 1, newFile)\n        this.files = files\n\n        // 删除  旧定位 写入 新定位 （已便支持修改id)\n        delete this.maps[file.id]\n        this.maps[newFile.id] = newFile\n\n        // 事件\n        this.emitInput()\n        this.emitFile(newFile, file)\n        return newFile\n      }\n      return false\n    },\n\n\n\n    // 预处理 事件 过滤器\n    emitFilter(newFile, oldFile) {\n      let isPrevent = false\n      this.$emit('input-filter', newFile, oldFile, function () {\n        isPrevent = true\n        return isPrevent\n      })\n      return isPrevent\n    },\n\n    // 处理后 事件 分发\n    emitFile(newFile, oldFile) {\n      this.$emit('input-file', newFile, oldFile)\n      if (newFile && newFile.fileObject && newFile.active && (!oldFile || !oldFile.active)) {\n        this.uploading++\n        // 激活\n        this.$nextTick(function () {\n          setTimeout(() => {\n            this.upload(newFile).then(() => {\n              // eslint-disable-next-line\n              newFile = this.get(newFile)\n              if (newFile && newFile.fileObject) {\n                this.update(newFile, {\n                  active: false,\n                  success: !newFile.error\n                })\n              }\n            }).catch((e) => {\n              this.update(newFile, {\n                active: false,\n                success: false,\n                error: e.code || e.error || e.message || e\n              })\n            })\n          }, parseInt(Math.random() * 50 + 50, 10))\n        })\n      } else if ((!newFile || !newFile.fileObject || !newFile.active) && oldFile && oldFile.fileObject && oldFile.active) {\n        // 停止\n        this.uploading--\n      }\n\n      // 自动延续激活\n      if (this.active && (Boolean(newFile) !== Boolean(oldFile) || newFile.active !== oldFile.active)) {\n        this.watchActive(true)\n      }\n    },\n\n    emitInput() {\n      this.$emit('input', this.files)\n    },\n\n\n    // 上传\n    upload(id) {\n      let file = this.get(id)\n\n      // 被删除\n      if (!file) {\n        return Promise.reject('not_exists')\n      }\n\n      // 不是文件对象\n      if (!file.fileObject) {\n        return Promise.reject('file_object')\n      }\n\n      // 有错误直接响应\n      if (file.error) {\n        return Promise.reject(file.error)\n      }\n\n      // 已完成直接响应\n      if (file.success) {\n        return Promise.resolve(file)\n      }\n\n      // 后缀\n      let extensions = this.extensions\n      if (extensions && (extensions.length || typeof extensions.length === 'undefined')) {\n        if (typeof extensions !== 'object' || !(extensions instanceof RegExp)) {\n          if (typeof extensions === 'string') {\n            extensions = extensions.split(',').map(value => value.trim()).filter(value => value)\n          }\n          extensions = new RegExp('\\\\.(' + extensions.join('|').replace(/\\./g, '\\\\.') + ')$', 'i')\n        }\n        if (file.name.search(extensions) === -1) {\n          return Promise.reject('extension')\n        }\n      }\n\n      // 大小\n      if (this.size > 0 && file.size >= 0 && file.size > this.size) {\n        return Promise.reject('size')\n      }\n\n      if (this.features.html5) {\n        if (this.shouldUseChunkUpload(file)) {\n          return this.uploadChunk(file)\n        }\n        if (file.putAction) {\n          return this.uploadPut(file)\n        }\n\n        return this.uploadHtml5(file)\n      }\n\n      return this.uploadHtml4(file)\n    },\n\n    /**\n     * Whether this file should be uploaded using chunk upload or not\n     *\n     * @param Object file\n     */\n    shouldUseChunkUpload (file) {\n      return this.chunkEnabled &&\n        !!this.chunkOptions.handler &&\n        file.size > this.chunkOptions.minSize\n    },\n\n    /**\n     * Upload a file using Chunk method\n     *\n     * @param File file\n     */\n    uploadChunk (file) {\n      const HandlerClass = this.chunkOptions.handler\n      file.chunk = new HandlerClass(file, this.chunkOptions)\n\n      return file.chunk.upload()\n    },\n\n    uploadPut(file) {\n      let querys = []\n      let value\n      for (let key in file.data) {\n        value = file.data[key]\n        if (value !== null && value !== undefined) {\n          querys.push(encodeURIComponent(key) + '=' + encodeURIComponent(value))\n        }\n      }\n      let queryString = querys.length ? (file.putAction.indexOf('?') === -1 ? '?' : '&') + querys.join('&') : ''\n      let xhr = new XMLHttpRequest()\n      xhr.open('PUT', file.putAction + queryString)\n      return this.uploadXhr(xhr, file, file.file)\n    },\n\n    uploadHtml5(file) {\n      let form = new window.FormData()\n      let value\n      for (let key in file.data) {\n        value = file.data[key]\n        if (value && typeof value === 'object' && typeof value.toString !== 'function') {\n          if (value instanceof File) {\n            form.append(key, value, value.name)\n          } else {\n            form.append(key, JSON.stringify(value))\n          }\n        } else if (value !== null && value !== undefined) {\n          form.append(key, value)\n        }\n      }\n      form.append(this.name, file.file, file.file.filename || file.name)\n      let xhr = new XMLHttpRequest()\n      xhr.open('POST', file.postAction)\n      return this.uploadXhr(xhr, file, form)\n    },\n\n    uploadXhr(xhr, _file, body) {\n      let file = _file\n      let speedTime = 0\n      let speedLoaded = 0\n\n      // 进度条\n      xhr.upload.onprogress = (e) => {\n        // 还未开始上传 已删除 未激活\n        file = this.get(file)\n        if (!e.lengthComputable || !file || !file.fileObject || !file.active) {\n          return\n        }\n\n        // 进度 速度 每秒更新一次\n        let speedTime2 = Math.round(Date.now() / 1000)\n        if (speedTime2 === speedTime) {\n          return\n        }\n        speedTime = speedTime2\n\n        file = this.update(file, {\n          progress: (e.loaded / e.total * 100).toFixed(2),\n          speed: e.loaded - speedLoaded,\n        })\n        speedLoaded = e.loaded\n      }\n\n      // 检查激活状态\n      let interval = setInterval(() => {\n        file = this.get(file)\n        if (file && file.fileObject && !file.success && !file.error && file.active) {\n          return\n        }\n\n        if (interval) {\n          clearInterval(interval)\n          interval = false\n        }\n\n        try {\n          xhr.abort()\n          xhr.timeout = 1\n        } catch (e) {\n        }\n      }, 100)\n\n      return new Promise((resolve, reject) => {\n        let complete\n        let fn = (e) => {\n          // 已经处理过了\n          if (complete) {\n            return\n          }\n          complete = true\n          if (interval) {\n            clearInterval(interval)\n            interval = false\n          }\n\n          file = this.get(file)\n\n          // 不存在直接响应\n          if (!file) {\n            return reject('not_exists')\n          }\n\n          // 不是文件对象\n          if (!file.fileObject) {\n            return reject('file_object')\n          }\n\n          // 有错误自动响应\n          if (file.error) {\n            return reject(file.error)\n          }\n\n          // 未激活\n          if (!file.active) {\n            return reject('abort')\n          }\n\n\n          // 已完成 直接相应\n          if (file.success) {\n            return resolve(file)\n          }\n\n          let data = {}\n\n          switch (e.type) {\n            case 'timeout':\n            case 'abort':\n              data.error = e.type\n              break\n            case 'error':\n              if (!xhr.status) {\n                data.error = 'network'\n              } else if (xhr.status >= 500) {\n                data.error = 'server'\n              } else if (xhr.status >= 400) {\n                data.error = 'denied'\n              }\n              break\n            default:\n              if (xhr.status >= 500) {\n                data.error = 'server'\n              } else if (xhr.status >= 400) {\n                data.error = 'denied'\n              } else {\n                data.progress = '100.00'\n              }\n          }\n\n          if (xhr.responseText) {\n            let contentType = xhr.getResponseHeader('Content-Type')\n            if (contentType && contentType.indexOf('/json') !== -1) {\n              data.response = JSON.parse(xhr.responseText)\n            } else {\n              data.response = xhr.responseText\n            }\n          }\n\n          // 更新\n          file = this.update(file, data)\n\n          // 相应错误\n          if (file.error) {\n            return reject(file.error)\n          }\n\n          // 响应\n          return resolve(file)\n        }\n\n        // 事件\n        xhr.onload = fn\n        xhr.onerror = fn\n        xhr.onabort = fn\n        xhr.ontimeout = fn\n\n        // 超时\n        if (file.timeout) {\n          xhr.timeout = file.timeout\n        }\n\n        // headers\n        for (let key in file.headers) {\n          xhr.setRequestHeader(key, file.headers[key])\n        }\n\n        // 更新 xhr\n        file = this.update(file, { xhr })\n\n        // 开始上传\n        xhr.send(body)\n      })\n    },\n\n\n\n\n    uploadHtml4(_file) {\n      let file = _file\n      let onKeydown = function (e) {\n        if (e.keyCode === 27) {\n          e.preventDefault()\n        }\n      }\n\n      let iframe = document.createElement('iframe')\n      iframe.id = 'upload-iframe-' + file.id\n      iframe.name = 'upload-iframe-' + file.id\n      iframe.src = 'about:blank'\n      iframe.setAttribute('style', 'width:1px;height:1px;top:-999em;position:absolute; margin-top:-999em;')\n\n\n      let form = document.createElement('form')\n\n      form.action = file.postAction\n\n      form.name = 'upload-form-' + file.id\n\n\n      form.setAttribute('method', 'POST')\n      form.setAttribute('target', 'upload-iframe-' + file.id)\n      form.setAttribute('enctype', 'multipart/form-data')\n\n      let value\n      let input\n      for (let key in file.data) {\n        value = file.data[key]\n        if (value && typeof value === 'object' && typeof value.toString !== 'function') {\n          value = JSON.stringify(value)\n        }\n        if (value !== null && value !== undefined) {\n          input = document.createElement('input')\n          input.type = 'hidden'\n          input.name = key\n          input.value = value\n          form.appendChild(input)\n        }\n      }\n      form.appendChild(file.el)\n\n      document.body.appendChild(iframe).appendChild(form)\n\n\n\n\n      let getResponseData = function () {\n        let doc\n        try {\n          if (iframe.contentWindow) {\n            doc = iframe.contentWindow.document\n          }\n        } catch (err) {\n        }\n        if (!doc) {\n          try {\n            doc = iframe.contentDocument ? iframe.contentDocument : iframe.document\n          } catch (err) {\n            doc = iframe.document\n          }\n        }\n        if (doc && doc.body) {\n          return doc.body.innerHTML\n        }\n        return null\n      }\n\n\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          file = this.update(file, { iframe })\n\n          // 不存在\n          if (!file) {\n            return reject('not_exists')\n          }\n\n          // 定时检查\n          let interval = setInterval(() => {\n            file = this.get(file)\n            if (file && file.fileObject && !file.success && !file.error && file.active) {\n              return\n            }\n\n            if (interval) {\n              clearInterval(interval)\n              interval = false\n            }\n\n            iframe.onabort({ type: file ? 'abort' : 'not_exists' })\n          }, 100)\n\n\n          let complete\n          let fn = (e) => {\n            // 已经处理过了\n            if (complete) {\n              return\n            }\n            complete = true\n\n\n            if (interval) {\n              clearInterval(interval)\n              interval = false\n            }\n\n            // 关闭 esc 事件\n            document.body.removeEventListener('keydown', onKeydown)\n\n            file = this.get(file)\n\n            // 不存在直接响应\n            if (!file) {\n              return reject('not_exists')\n            }\n\n            // 不是文件对象\n            if (!file.fileObject) {\n              return reject('file_object')\n            }\n\n            // 有错误自动响应\n            if (file.error) {\n              return reject(file.error)\n            }\n\n            // 未激活\n            if (!file.active) {\n              return reject('abort')\n            }\n\n            // 已完成 直接相应\n            if (file.success) {\n              return resolve(file)\n            }\n\n            let response = getResponseData()\n            let data = {}\n            switch (e.type) {\n              case 'abort':\n                data.error = 'abort'\n                break\n              case 'error':\n                if (file.error) {\n                  data.error = file.error\n                } else if (response === null) {\n                  data.error = 'network'\n                } else {\n                  data.error = 'denied'\n                }\n                break\n              default:\n                if (file.error) {\n                  data.error = file.error\n                } else if (data === null) {\n                  data.error = 'network'\n                } else {\n                  data.progress = '100.00'\n                }\n            }\n\n            if (response !== null) {\n              if (response && response.substr(0, 1) === '{' && response.substr(response.length - 1, 1) === '}') {\n                try {\n                  response = JSON.parse(response)\n                } catch (err) {\n                }\n              }\n              data.response = response\n            }\n\n            // 更新\n            file = this.update(file, data)\n\n            if (file.error) {\n              return reject(file.error)\n            }\n\n            // 响应\n            return resolve(file)\n          }\n\n\n          // 添加事件\n          iframe.onload = fn\n          iframe.onerror = fn\n          iframe.onabort = fn\n\n\n          // 禁止 esc 键\n          document.body.addEventListener('keydown', onKeydown)\n\n          // 提交\n          form.submit()\n        }, 50)\n      }).then(function (res) {\n        iframe.parentNode && iframe.parentNode.removeChild(iframe)\n        return res\n      }).catch(function (res) {\n        iframe.parentNode && iframe.parentNode.removeChild(iframe)\n        return res\n      })\n    },\n\n\n\n    watchActive(active) {\n      let file\n      let index = 0\n      while ((file = this.files[index])) {\n        index++\n        if (!file.fileObject) {\n          // 不是文件对象\n        } else if (active && !this.destroy) {\n          if (this.uploading >= this.thread || (this.uploading && !this.features.html5)) {\n            break\n          }\n          if (!file.active && !file.error && !file.success) {\n            this.update(file, { active: true })\n          }\n        } else {\n          if (file.active) {\n            this.update(file, { active: false })\n          }\n        }\n      }\n      if (this.uploading === 0) {\n        this.active = false\n      }\n    },\n\n\n    watchDrop(_el) {\n      let el = _el\n      if (!this.features.drop) {\n        return\n      }\n\n      // 移除挂载\n      if (this.dropElement) {\n        try {\n          document.removeEventListener('dragenter', this.onDragenter, false)\n          document.removeEventListener('dragleave', this.onDragleave, false)\n          document.removeEventListener('drop', this.onDocumentDrop, false)\n          this.dropElement.removeEventListener('dragover', this.onDragover, false)\n          this.dropElement.removeEventListener('drop', this.onDrop, false)\n        } catch (e) {\n        }\n      }\n\n      if (!el) {\n        el = false\n      } else if (typeof el === 'string') {\n        el = document.querySelector(el) || this.$root.$el.querySelector(el)\n      } else if (el === true) {\n        el = this.$parent.$el\n      }\n\n      this.dropElement = el\n\n      if (this.dropElement) {\n        document.addEventListener('dragenter', this.onDragenter, false)\n        document.addEventListener('dragleave', this.onDragleave, false)\n        document.addEventListener('drop', this.onDocumentDrop, false)\n        this.dropElement.addEventListener('dragover', this.onDragover, false)\n        this.dropElement.addEventListener('drop', this.onDrop, false)\n      }\n    },\n\n\n    onDragenter(e) {\n      e.preventDefault()\n      if (!this.dropActive) {\n        this.dropActive = true\n      }\n    },\n\n    onDragleave(e) {\n      e.preventDefault()\n      if (e.target.nodeName === 'HTML' || (e.screenX === 0 && e.screenY === 0 && !e.fromElement && e.offsetX <= 0)) {\n        this.dropActive = false\n      }\n    },\n\n    onDragover(e) {\n      e.preventDefault()\n    },\n\n    onDocumentDrop() {\n      this.dropActive = false\n    },\n\n    onDrop(e) {\n      e.preventDefault()\n      this.addDataTransfer(e.dataTransfer)\n    },\n  }\n}\n</script>\n"],"names":["createRequest","options","xhr","XMLHttpRequest","responseType","open","method","url","headers","keys","forEach","setRequestHeader","key","sendRequest","body","Promise","resolve","reject","onload","status","response","statusText","onerror","send","JSON","stringify","ChunkUploadHandler","file","chunks","start","end","this","chunkSize","fileSize","push","slice","maxRetries","progress","active","chunksUploading","abort","startChunking","promise","action","Object","assign","startBody","fileType","then","res","_this2","message","sessionId","data","session_id","end_offset","createChunks","catch","error","i","maxActiveChunks","uploadNextChunk","hasChunksToUpload","uploadChunk","chunksToUpload","length","finish","chunk","updateFileProgress","upload","addEventListener","evt","lengthComputable","Math","round","loaded","total","uploadBody","startOffset","blob","uploaded","retries","pause","_this3","finishBody","_this4","parseInt","maxActive","type","size","completedProgress","chunksUploaded","uploadingProgress","reduce","_this5","min","filter","CHUNK_DEFAULT_OPTIONS","ChunkUploadDefaultHandler","render","e","$destroy","$parent","addInputFile","target","constructor","$el","String","Boolean","Number","multiple","Array","value","input","document","createElement","window","FormData","files","webkitdirectory","directory","features","html5","ondrop","drop","maps","$nextTick","$forceUpdate","watchDrop","destroy","fileObject","success","undefined","watchActive","oldMaps","id","newFile","oldFile","emitFile","emitInput","_files","index","addIndex","isArray","addFiles","Blob","webkitRelativePath","relativePath","name","Element","el","putAction","postAction","timeout","random","toString","substr","emitFilter","maximum","clear","newFiles","concat","splice","replace","add","dataTransfer","items","item","getAsEntry","getAsFile","webkitGetAsEntry","_this","getEntry","results","entry","path","isFile","isDirectory","dropDirectory","dirReader","createReader","readEntries","entries","id1","id2","file1","get","file2","index1","indexOf","index2","isPrevent","$emit","uploading","update","code","extensions","RegExp","split","map","trim","join","search","shouldUseChunkUpload","uploadPut","uploadHtml5","uploadHtml4","chunkEnabled","chunkOptions","handler","minSize","HandlerClass","querys","encodeURIComponent","queryString","uploadXhr","form","File","append","filename","_file","speedTime","speedLoaded","onprogress","speedTime2","Date","now","toFixed","interval","setInterval","complete","fn","responseText","contentType","getResponseHeader","parse","onabort","ontimeout","onKeydown","keyCode","preventDefault","iframe","src","setAttribute","appendChild","removeEventListener","doc","contentWindow","err","contentDocument","innerHTML","getResponseData","submit","parentNode","removeChild","thread","_el","dropElement","onDragenter","onDragleave","onDocumentDrop","onDragover","onDrop","querySelector","$root","dropActive","nodeName","screenX","screenY","fromElement","offsetX","addDataTransfer"],"mappings":";;;;;8LAKA,IAAaA,EAAgB,SAACC,OACtBC,EAAM,IAAIC,wBACZC,aAAe,SACfC,KAAKJ,EAAQK,QAAU,MAAOL,EAAQM,KACtCN,EAAQO,gBACHC,KAAKR,EAAQO,SAASE,QAAQ,cAC/BC,iBAAiBC,EAAKX,EAAQO,QAAQI,MAIvCV,GASIW,EAAc,SAACX,EAAKY,UACxB,IAAIC,QAAQ,SAACC,EAASC,KACvBC,OAAS,WACPhB,EAAIiB,QAAU,KAAOjB,EAAIiB,OAAS,MAC5BjB,EAAIkB,YAELlB,EAAImB,eAGXC,QAAU,kBAAML,EAAOf,EAAImB,eAC3BE,KAAKC,KAAKC,UAAUX,SAWb,SAAUb,OACjBC,EAAMF,EAAcC,UAEnBY,EAAYX,EAAKD,EAAQa,4PChDlC,IAEqBY,wBAONC,EAAM1B,8GACZ0B,KAAOA,OACP1B,QAAUA,wDA6HV2B,kBAEDC,EAAQ,EACRC,EAAMC,KAAKC,UACRH,EAAQE,KAAKE,eACbL,OAAOM,WACJH,KAAKJ,KAAKA,KAAKQ,MAAMN,EAAOC,eACrBD,UACL,UACCE,KAAKK,kBAERN,GACMC,KAAKC,4DAQhBL,KAAKU,SAAWN,KAAKM,8CASrBV,KAAKW,QAAS,OACdC,gBAAgB7B,QAAQ,cACrBR,IAAIsC,UACJF,QAAS,0CAUZX,KAAKW,QAAS,OACdG,wEAWAC,QAAU,IAAI3B,QAAQ,SAACC,EAASC,KAC9BD,QAAUA,IACVC,OAASA,SAEXY,QAEEE,KAAKW,6DASF,eACCX,KAAKvB,YACTuB,KAAKY,YACJC,OAAOC,OAAOd,KAAKe,iBAChB,kBACIf,KAAKgB,cACVhB,KAAKE,aAEZe,KAAK,eACa,YAAfC,EAAI9B,cACC+B,EAAKjC,OAAOgC,EAAIE,WAGpBC,UAAYH,EAAII,KAAKC,aACrBtB,UAAYiB,EAAII,KAAKE,aAErBC,iBACAf,kBACJgB,MAAM,mBAASP,EAAKjC,OAAOyC,iDAOzB,IAAIC,EAAI,EAAGA,EAAI5B,KAAK6B,gBAAiBD,SACnCE,+DAUH9B,KAAKJ,KAAKW,OAAQ,IAChBP,KAAK+B,yBACA/B,KAAKgC,YAAYhC,KAAKiC,eAAe,OAGV,IAAhCjC,KAAKQ,gBAAgB0B,cAChBlC,KAAKmC,8CAcLC,gBACL9B,SAAW,IACXC,QAAS,OACV8B,uBACClE,IAAMF,UACF,eACC+B,KAAKvB,YACTuB,KAAKY,WAGNzC,IAAImE,OAAOC,iBAAiB,WAAY,SAASC,GACjDA,EAAIC,qBACAnC,SAAWoC,KAAKC,MAAMH,EAAII,OAASJ,EAAIK,MAAQ,QAEtD,KAEST,EAAMjE,IAAK0C,OAAOC,OAAOd,KAAK8C,kBACjC,oBACK9C,KAAKqB,uBACHe,EAAMW,kBACbX,EAAMY,QACX/B,KAAK,iBACDV,QAAS,EACI,YAAfW,EAAI9B,SACA6D,UAAW,UAEbb,EAAMc,WAAa,WAChBC,QACEC,EAAKlE,OAAO,wBAIlB4C,oBACJJ,MAAM,gBACDnB,QAAS,EACX6B,EAAMc,WAAa,WAChBC,QACEC,EAAKlE,OAAO,wBAGhB4C,qEASFO,+BAGK,eACCrC,KAAKvB,YACTuB,KAAKY,YACJC,OAAOC,OAAOd,KAAKqD,kBAChB,oBACKrD,KAAKqB,cAElBJ,KAAK,eACa,YAAfC,EAAI9B,cACCkE,EAAKpE,OAAOgC,EAAIE,WAGpBnC,QAAQiC,KACZQ,MAAM,mBAAS4B,EAAKpE,OAAOyC,+CApTvB4B,SAASvD,KAAK9B,QAAQmC,2DAOtBkD,SAASvD,KAAK9B,QAAQsF,mDAOtBxD,KAAKJ,KAAK6D,6CAOVzD,KAAKJ,KAAK8D,2CAOV1D,KAAK9B,QAAQ0C,QAAU,8CAOvBZ,KAAK9B,QAAQ6C,wDAObf,KAAK9B,QAAQ4E,yDAOb9C,KAAK9B,QAAQmF,sDAObrD,KAAK9B,QAAQO,0DAOXuB,KAAKH,mDASR8D,EAAqB3D,KAAK4D,eAAe1B,OAASlC,KAAKH,OAAOqC,OAAU,IACxE2B,EAAoB7D,KAAKQ,gBAAgBsD,OAAO,SAACxD,EAAU8B,UACxD9B,GAA8B,EAAjB8B,EAAM9B,UAAgByD,EAAKlE,OAAOqC,QACrD,UAEIQ,KAAKsB,IAAIL,EAAoBE,EAAmB,mDAOhD7D,KAAKH,OAAOoE,OAAO,mBAChB7B,EAAM7B,SAAW6B,EAAMa,4DAQ1BjD,KAAKiC,eAAeC,OAAS,iDAO7BlC,KAAKH,OAAOoE,OAAO,oBACf7B,EAAMjE,OAASiE,EAAM7B,uDAQzBP,KAAKH,OAAOoE,OAAO,oBACf7B,EAAMa,qBChIrB,gQAAA,GAaA,6eCbA,0qBAAA,GAmCA,IAGMiB,2BAEc,2BAEV,WACC,kBACE,aACC,UAEHC,MAGKC,+LDrCAA,4aAELC,QACAC,gBACAC,QAAQC,aAAaH,EAAEI,YAExBzE,KAAK0E,oBACC1E,KAAKuE,WACTvE,KAAK2E,+BCmCLC,mBAIAA,eACG,qBAIHA,uBAIAC,uBAIAC,iCAEG9E,KAAK+E,SAAW,EAAI,oBAKtBF,QAASC,yBAIVD,0BAIAD,wBAIAA,sBAIA/D,eACGA,mBAIHA,eACGA,sBAIHiE,eACG,kBAKA,uBAIHD,iBACG,cAIHC,eACG,uBAIAE,mBAKHA,cACGA,oBAIHF,eACG,sBAKHD,iBACG,eAKHhE,eACG,kBACAqD,kCAOFlE,KAAKiF,uBAEH,aACI,QACL,WAGA,cACI,YAED,WAEF,2BAUPC,EAAQC,SAASC,cAAc,WAC7B3B,KAAO,SACPsB,UAAW,EAGbM,OAAOC,UAAYJ,EAAMK,OAEU,kBAA1BL,EAAMM,iBAA4D,kBAApBN,EAAMO,iBACxDC,SAASD,WAAY,GAIxBzF,KAAK0F,SAASC,YAAiC,IAAjBT,EAAMU,cACjCF,SAASG,MAAO,SAGlBH,SAASC,OAAQ,OAInBG,aAEAC,UAAU,WAGT/F,KAAKuE,cACFA,QAAQyB,oBAIVC,UAAUjG,KAAK6F,uCAUjBK,SAAU,OAGV3F,QAAS,yCAcRX,SACKgC,EAAI,EAAGA,EAAI5B,KAAKuF,MAAMrD,OAAQN,UAC9B5B,KAAKuF,MAAM3D,IACTuE,aAAevG,EAAK+B,QAAU/B,EAAKwG,eACnC,SAGJ,kCAIAvF,OAAOC,OAAOoD,EAAuBlE,KAAKoC,oCAK/C,eACApC,KAAK0F,SAASC,MAAQ,qBAAuB,qBAC7C3F,KAAK0F,SAASD,WAAazF,KAAKyF,UAAY,8BAA2BY,EACvErG,KAAK0F,SAASG,MAAQ7F,KAAK6F,KAAO,yBAAsBQ,4BAOrD9F,QACA+F,YAAY/F,0BAIbP,KAAKuE,cACFA,QAAQyB,8BAIZf,QACEgB,UAAUhB,mBAGXM,MACAvF,KAAKuF,QAAUA,QAGdA,MAAQA,MAETgB,EAAUvG,KAAK8F,UAGdA,YACA,IAAIlE,EAAI,EAAGA,EAAI5B,KAAKuF,MAAMrD,OAAQN,IAAK,KACtChC,EAAOI,KAAKuF,MAAM3D,QACjBkE,KAAKlG,EAAK4G,IAAM5G,MAIlB,IAAIf,KAAOmB,KAAK8F,KAAM,KACrBW,EAAUzG,KAAK8F,KAAKjH,GACpB6H,EAAUH,EAAQ1H,GAClB4H,IAAYC,QACTC,SAASF,EAASC,OAKtB,IAAI7H,KAAO0H,EACTvG,KAAK8F,KAAKjH,SACR8H,cAASN,EAAWE,EAAQ1H,oCAUjCmB,KAAKuF,MAAMrD,OAAQ,KACjBqD,EAAQvF,KAAKuF,WACZA,cAGAO,aAGAc,gBACA,IAAIhF,EAAI,EAAGA,EAAI2D,EAAMrD,OAAQN,SAC3B+E,cAASN,EAAWd,EAAM3D,WAG5B,gBAIL4E,WACGA,IAIa,qBAAPA,gBAAAA,IACFxG,KAAK8F,KAAKU,EAAGA,MAAO,EAGtBxG,KAAK8F,KAAKU,KAAO,iBAItBK,OAAQC,yDAAQ9G,KAAK+G,SACnBxB,EAAQsB,EACRG,EAAUzB,aAAiBP,MAG1BgC,OACMzB,YAIP0B,KACKrF,EAAI,EAAGA,EAAI2D,EAAMrD,OAAQN,IAAK,KACjChC,EAAO2F,EAAM3D,GACb5B,KAAK0F,SAASC,OAAS/F,aAAgBsH,sBAGjCtH,EAAK8D,UACL9D,EAAKuH,oBAAsBvH,EAAKwH,cAAgBxH,EAAKyH,MAAQ,eAC7DzH,EAAK6D,WAGX0C,GAAa,MACO,IAApBvG,EAAKuG,aAEEvG,EAAKuG,cACD,EACe,oBAAZmB,SAA2B1H,EAAK2H,cAAcD,WACjD,EACY,oBAATJ,MAAwBtH,EAAKA,gBAAgBsH,UAChD,IAEXf,sBAEY,QACL,OACD,gBACA,WACE,QACD,YACE,YACEnG,KAAKwH,qBACJxH,KAAKyH,mBACRzH,KAAK0H,SACX9H,wBAGO,aACH,KAKJ0B,UACAtB,KAAKsB,KACL1B,EAAK0B,KAAO1B,EAAK0B,WAGjB7C,aACAuB,KAAKvB,QACLmB,EAAKnB,QAAUmB,EAAKnB,aAKtBmB,EAAK4G,OACHA,GAAK9D,KAAKiF,SAASC,SAAS,IAAIC,OAAO,KAG1C7H,KAAK8H,WAAWlI,OAAMyG,OAKtBrG,KAAK+H,QAAU,GAAMd,EAAS/E,OAASlC,KAAKuF,MAAMrD,QAAWlC,KAAK+H,mBAI7D5H,KAAKP,GAGO,IAAjBI,KAAK+H,mBAMNd,EAAS/E,cACL,EAIY,IAAjBlC,KAAK+H,cACFC,YAKHC,UACU,IAAVnB,GAA4B,IAAVA,IACTG,EAASiB,OAAOlI,KAAKuF,OACvBuB,KACEG,EAASiB,YACXC,OAAOrB,EAAO,EAAGG,KAEfjH,KAAKuF,MAAM2C,OAAOjB,QAG1B1B,MAAQ0C,MAGR,IAAIrG,EAAI,EAAGA,EAAIqF,EAAS/E,OAAQN,IAAK,KACpChC,EAAOqH,EAASrF,QACfkE,KAAKlG,EAAK4G,IAAM5G,OAIlBgH,gBACA,IAAIhF,EAAI,EAAGA,EAAIqF,EAAS/E,OAAQN,SAC9B+E,SAASM,EAASrF,QAAIyE,UAGtBW,EAAUC,EAAWA,EAAS,0BAM1BM,OACPhC,QACAgC,EAAGhC,UACA,IAAI3D,EAAI,EAAGA,EAAI2F,EAAGhC,MAAMrD,OAAQN,IAAK,KACpChC,EAAO2H,EAAGhC,MAAM3D,KACdzB,WACEP,EAAK8D,UACL9D,EAAKuH,oBAAsBvH,EAAKwH,cAAgBxH,EAAKyH,UACrDzH,EAAK6D,0BAMTtD,WACEoH,EAAGtC,MAAMmD,QAAQ,sBAAuB,oBAI3CpI,KAAKqI,IAAI9C,6BAKF+C,cACV/C,QACA+C,EAAaC,OAASD,EAAaC,MAAMrG,OAAQ,SAC/CqG,KACK3G,EAAI,EAAGA,EAAI0G,EAAaC,MAAMrG,OAAQN,IAAK,KAC9C4G,EAAOF,EAAaC,MAAM3G,MAC1B4G,EAAKC,WACAD,EAAKC,cAAgBD,EAAKE,YACxBF,EAAKG,kBACPH,EAAKG,oBAELH,EAAKE,gBAGNvI,KAAKqI,UAIR,IAAIxJ,QAAQ,SAACC,EAASC,IACb,SAAVP,EAAWiD,OACT4G,EAAOD,EAAM3G,OAEZ4G,GAASI,EAAKb,QAAU,GAAKxC,EAAMrD,QAAU0G,EAAKb,eAC9C9I,EAAQ2J,EAAKP,IAAI9C,MAErBsD,SAASL,GAAMvH,KAAK,SAAU6H,KAC3B3I,eAAQ2I,MACNlH,EAAI,MAGR,QAIR0G,EAAa/C,MAAMrD,OAAQ,KACxB,IAAIN,EAAI,EAAGA,EAAI0G,EAAa/C,MAAMrD,WAC/B/B,KAAKmI,EAAa/C,MAAM3D,MAC1B5B,KAAK+H,QAAU,GAAKxC,EAAMrD,QAAUlC,KAAK+H,UAFAnG,YAMxC5C,QAAQC,QAAQe,KAAKqI,IAAI9C,WAG3BvG,QAAQC,+BAKR8J,cAAOC,yDAAO,UACd,IAAIhK,QAAQ,SAACC,EAASC,MACvB6J,EAAME,SACFrJ,KAAK,SAAUA,YAGTA,EAAK8D,UACLsF,EAAOpJ,EAAKyH,UACZzH,EAAK6D,sBAKZ,GAAIsF,EAAMG,aAAe/H,EAAKgI,cAAe,KAC9C5D,KACA6D,EAAYL,EAAMM,gBACJ,SAAdC,MACQA,YAAY,SAACC,IACP,SAAV5K,EAAWiD,UACP2H,EAAQ3H,IAAY,IAANA,GAAaT,EAAK4G,QAAU,GAAKxC,EAAMrD,QAAUf,EAAK4G,QACjE9I,EAAQsG,GAEZgE,EAAQ3H,UAGRiH,SAASU,EAAQ3H,GAAIoH,EAAOD,EAAM1B,KAAO,KAAKpG,KAAK,SAAC6H,KACjD3I,eAAQ2I,MACNlH,EAAI,KAJL0H,KAOH,uCAWVE,EAAKC,OACPC,EAAQ1J,KAAK2J,IAAIH,GACjBI,EAAQ5J,KAAK2J,IAAIF,OAChBC,IAAUE,GAASF,IAAUE,SACzB,MAELrE,EAAQvF,KAAKuF,MAAM2C,WACnB2B,EAAStE,EAAMuE,QAAQJ,GACvBK,EAASxE,EAAMuE,QAAQF,UACX,IAAZC,IAA6B,IAAZE,MAGfF,GAAUD,IACVG,GAAUL,OACXnE,MAAQA,OACRqB,aACE,oBAIFJ,OACD5G,EAAOI,KAAK2J,IAAInD,MAChB5G,EAAM,IACJI,KAAK8H,gBAAWzB,EAAWzG,UACtB,MAEL2F,EAAQvF,KAAKuF,MAAM2C,WACnBpB,EAAQvB,EAAMuE,QAAQlK,OACX,IAAXkH,iBACMnF,MAAM,SAAU/B,IACjB,IAEHuI,OAAOrB,EAAO,QACfvB,MAAQA,SAGNvF,KAAK8F,KAAKlG,EAAK4G,SAGjBI,iBACAD,cAASN,EAAWzG,UAEpBA,mBAIF4G,EAAIlF,OACL1B,EAAOI,KAAK2J,IAAInD,MAChB5G,EAAM,KACJ6G,OACC7G,EACA0B,OAGD1B,EAAKuG,aAAcvG,EAAKW,QAAWkG,EAAQlG,QAAWkG,EAAQ9E,OAAU8E,EAAQL,YAC1EzE,MAAQ,SAGd3B,KAAK8H,WAAWrB,EAAS7G,UACpB,MAGL2F,EAAQvF,KAAKuF,MAAM2C,WACnBpB,EAAQvB,EAAMuE,QAAQlK,UACX,IAAXkH,WACMnF,MAAM,SAAU/B,IACjB,MAEHuI,OAAOrB,EAAO,EAAGL,QAClBlB,MAAQA,SAGNvF,KAAK8F,KAAKlG,EAAK4G,SACjBV,KAAKW,EAAQD,IAAMC,OAGnBG,iBACAD,SAASF,EAAS7G,GAChB6G,UAEF,uBAMEA,EAASC,OACdsD,GAAY,cACXC,MAAM,eAAgBxD,EAASC,EAAS,qBAC/B,IAGPsD,qBAIAvD,EAASC,QACXuD,MAAM,aAAcxD,EAASC,KAC9BD,GAAWA,EAAQN,YAAcM,EAAQlG,SAAYmG,GAAYA,EAAQnG,OAuBhEkG,GAAYA,EAAQN,YAAeM,EAAQlG,SAAWmG,IAAWA,EAAQP,aAAcO,EAAQnG,aAErG2J,kBAxBAA,iBAEAnE,UAAU,iCACF,aACJzD,OAAOmE,GAASxF,KAAK,cAEdmC,EAAKuG,IAAIlD,KACJA,EAAQN,cAChBgE,OAAO1D,WACF,WACEA,EAAQ9E,UAGrBD,MAAM,SAAC2C,KACH8F,OAAO1D,WACF,WACC,QACFpC,EAAE+F,MAAQ/F,EAAE1C,OAAS0C,EAAEjD,SAAWiD,OAG5Cd,SAAyB,GAAhBb,KAAKiF,SAAgB,GAAI,SAQrC3H,KAAKO,QAAWsE,QAAQ4B,KAAa5B,QAAQ6B,IAAYD,EAAQlG,SAAWmG,EAAQnG,aACjF+F,aAAY,8BAKd2D,MAAM,QAASjK,KAAKuF,wBAKpBiB,OACD5G,EAAOI,KAAK2J,IAAInD,OAGf5G,SACIZ,QAAQE,OAAO,kBAInBU,EAAKuG,kBACDnH,QAAQE,OAAO,kBAIpBU,EAAK+B,aACA3C,QAAQE,OAAOU,EAAK+B,UAIzB/B,EAAKwG,eACApH,QAAQC,QAAQW,OAIrByK,EAAarK,KAAKqK,kBAClBA,IAAeA,EAAWnI,aAAuC,IAAtBmI,EAAWnI,UAC9B,qBAAfmI,gBAAAA,KAA6BA,aAAsBC,SAClC,iBAAfD,MACIA,EAAWE,MAAM,KAAKC,IAAI,mBAASvF,EAAMwF,SAAQxG,OAAO,mBAASgB,OAEnE,IAAIqF,OAAO,OAASD,EAAWK,KAAK,KAAKtC,QAAQ,MAAO,OAAS,KAAM,OAEhD,IAAlCxI,EAAKyH,KAAKsD,OAAON,IACZrL,QAAQE,OAAO,aAKtBc,KAAK0D,KAAO,GAAK9D,EAAK8D,MAAQ,GAAK9D,EAAK8D,KAAO1D,KAAK0D,KAC/C1E,QAAQE,OAAO,QAGpBc,KAAK0F,SAASC,MACZ3F,KAAK4K,qBAAqBhL,GACrBI,KAAKgC,YAAYpC,GAEtBA,EAAK4H,UACAxH,KAAK6K,UAAUjL,GAGjBI,KAAK8K,YAAYlL,GAGnBI,KAAK+K,YAAYnL,kCAQJA,UACbI,KAAKgL,gBACRhL,KAAKiL,aAAaC,SACpBtL,EAAK8D,KAAO1D,KAAKiL,aAAaE,8BAQrBvL,OACLwL,EAAepL,KAAKiL,aAAaC,iBAClC9I,MAAQ,IAAIgJ,EAAaxL,EAAMI,KAAKiL,cAElCrL,EAAKwC,MAAME,6BAGV1C,OACJyL,KACApG,aACC,IAAIpG,KAAOe,EAAK0B,KAEL,UADN1B,EAAK0B,KAAKzC,UACcwH,IAAVpB,KACb9E,KAAKmL,mBAAmBzM,GAAO,IAAMyM,mBAAmBrG,QAG/DsG,EAAcF,EAAOnJ,SAA2C,IAAjCtC,EAAK4H,UAAUsC,QAAQ,KAAc,IAAM,KAAOuB,EAAOX,KAAK,KAAO,GACpGvM,EAAM,IAAIC,wBACVE,KAAK,MAAOsB,EAAK4H,UAAY+D,GAC1BvL,KAAKwL,UAAUrN,EAAKyB,EAAMA,EAAKA,4BAG5BA,OACN6L,EAAO,IAAIpG,OAAOC,SAClBL,aACC,IAAIpG,KAAOe,EAAK0B,QACX1B,EAAK0B,KAAKzC,KACY,qBAAVoG,gBAAAA,KAAgD,mBAAnBA,EAAM2C,SACjD3C,aAAiByG,OACdC,OAAO9M,EAAKoG,EAAOA,EAAMoC,QAEzBsE,OAAO9M,EAAKY,KAAKC,UAAUuF,IAEf,OAAVA,QAA4BoB,IAAVpB,KACtB0G,OAAO9M,EAAKoG,KAGhB0G,OAAO3L,KAAKqH,KAAMzH,EAAKA,KAAMA,EAAKA,KAAKgM,UAAYhM,EAAKyH,UACzDlJ,EAAM,IAAIC,wBACVE,KAAK,OAAQsB,EAAK6H,YACfzH,KAAKwL,UAAUrN,EAAKyB,EAAM6L,uBAGzBtN,EAAK0N,EAAO9M,cAChBa,EAAOiM,EACPC,EAAY,EACZC,EAAc,IAGdzJ,OAAO0J,WAAa,SAAC3H,QAEhBf,EAAKqG,IAAI/J,GACXyE,EAAE5B,kBAAqB7C,GAASA,EAAKuG,YAAevG,EAAKW,YAK1D0L,EAAavJ,KAAKC,MAAMuJ,KAAKC,MAAQ,KACrCF,IAAeH,MAGPG,IAEL3I,EAAK6G,OAAOvK,aACNyE,EAAEzB,OAASyB,EAAExB,MAAQ,KAAKuJ,QAAQ,SACtC/H,EAAEzB,OAASmJ,MAEN1H,EAAEzB,cAIdyJ,EAAWC,YAAY,kBAClBhJ,EAAKqG,IAAI/J,MACJA,EAAKuG,YAAevG,EAAKwG,SAAYxG,EAAK+B,QAAS/B,EAAKW,QAIhE8L,kBACYA,MACH,SAIP5L,UACAiH,QAAU,EACd,MAAOrD,OAER,YAEI,IAAIrF,QAAQ,SAACC,EAASC,OACvBqN,SACAC,EAAK,SAACnI,OAEJkI,SAGO,EACPF,kBACYA,MACH,OAGN/I,EAAKqG,IAAI/J,WAIPV,EAAO,kBAIXU,EAAKuG,kBACDjH,EAAO,kBAIZU,EAAK+B,aACAzC,EAAOU,EAAK+B,WAIhB/B,EAAKW,cACDrB,EAAO,YAKZU,EAAKwG,eACAnH,EAAQW,OAGb0B,YAEI+C,EAAEZ,UACH,cACA,UACE9B,MAAQ0C,EAAEZ,eAEZ,QACEtF,EAAIiB,OAEEjB,EAAIiB,QAAU,MAClBuC,MAAQ,SACJxD,EAAIiB,QAAU,QAClBuC,MAAQ,YAJRA,MAAQ,wBAQXxD,EAAIiB,QAAU,MACXuC,MAAQ,SACJxD,EAAIiB,QAAU,MAClBuC,MAAQ,WAERrB,SAAW,YAIlBnC,EAAIsO,aAAc,KAChBC,EAAcvO,EAAIwO,kBAAkB,gBACpCD,IAAiD,IAAlCA,EAAY5C,QAAQ,WAChCzK,SAAWI,KAAKmN,MAAMzO,EAAIsO,gBAE1BpN,SAAWlB,EAAIsO,sBAKjBnJ,EAAK6G,OAAOvK,EAAM0B,IAGhBK,MACAzC,EAAOU,EAAK+B,OAId1C,EAAQW,SAeZ,IAAIf,OAXLM,OAASqN,IACTjN,QAAUiN,IACVK,QAAUL,IACVM,UAAYN,EAGZ5M,EAAK8H,YACHA,QAAU9H,EAAK8H,SAIL9H,EAAKnB,UACfG,iBAAiBC,EAAKe,EAAKnB,QAAQI,MAIlCyE,EAAK6G,OAAOvK,GAAQzB,UAGvBqB,KAAKT,2BAOD8M,cACNjM,EAAOiM,EACPkB,EAAY,SAAU1I,GACN,KAAdA,EAAE2I,WACFC,kBAIFC,EAAS/H,SAASC,cAAc,YAC7BoB,GAAK,iBAAmB5G,EAAK4G,KAC7Ba,KAAO,iBAAmBzH,EAAK4G,KAC/B2G,IAAM,gBACNC,aAAa,QAAS,6EAGzB3B,EAAOtG,SAASC,cAAc,UAE7BxE,OAAShB,EAAK6H,aAEdJ,KAAO,eAAiBzH,EAAK4G,KAG7B4G,aAAa,SAAU,UACvBA,aAAa,SAAU,iBAAmBxN,EAAK4G,MAC/C4G,aAAa,UAAW,2BAEzBnI,SACAC,aACC,IAAIrG,KAAOe,EAAK0B,QACX1B,EAAK0B,KAAKzC,KACY,qBAAVoG,gBAAAA,KAAgD,mBAAnBA,EAAM2C,aAC7CnI,KAAKC,UAAUuF,IAEX,OAAVA,QAA4BoB,IAAVpB,OACZE,SAASC,cAAc,UACzB3B,KAAO,WACP4D,KAAOxI,IACPoG,MAAQA,IACToI,YAAYnI,MAGhBmI,YAAYzN,EAAK2H,aAEbxI,KAAKsO,YAAYH,GAAQG,YAAY5B,UA2BvC,IAAIzM,QAAQ,SAACC,EAASC,cAChB,kBACF6E,EAAKoG,OAAOvK,GAAQsN,mBAIlBhO,EAAO,kBAIZmN,EAAWC,YAAY,cAClBvI,EAAK4F,IAAI/J,KACJA,EAAKuG,aAAevG,EAAKwG,UAAYxG,EAAK+B,OAAS/B,EAAKW,SAIhE8L,kBACYA,MACH,KAGNQ,SAAUpJ,KAAM7D,EAAO,QAAU,iBACvC,KAGC2M,SACAC,EAAK,SAACnI,OAEJkI,SAGO,EAGPF,kBACYA,MACH,YAIJtN,KAAKuO,oBAAoB,UAAWP,OAEtChJ,EAAK4F,IAAI/J,WAIPV,EAAO,kBAIXU,EAAKuG,kBACDjH,EAAO,kBAIZU,EAAK+B,aACAzC,EAAOU,EAAK+B,WAIhB/B,EAAKW,cACDrB,EAAO,YAIZU,EAAKwG,eACAnH,EAAQW,OAGbP,EA3FY,eAChBkO,aAEEL,EAAOM,kBACHN,EAAOM,cAAcrI,UAE7B,MAAOsI,QAEJF,QAEKL,EAAOQ,gBAAkBR,EAAOQ,gBAAkBR,EAAO/H,SAC/D,MAAOsI,KACDP,EAAO/H,gBAGboI,GAAOA,EAAIxO,KACNwO,EAAIxO,KAAK4O,UAEX,KAyEYC,GACXtM,YACI+C,EAAEZ,UACH,UACE9B,MAAQ,kBAEV,QACC/B,EAAK+B,QACFA,MAAQ/B,EAAK+B,QAEbA,MADiB,OAAbtC,EACI,UAEA,uBAIXO,EAAK+B,QACFA,MAAQ/B,EAAK+B,MACA,OAATL,IACJK,MAAQ,YAERrB,SAAW,YAIL,OAAbjB,EAAmB,IACjBA,GAAsC,MAA1BA,EAASwI,OAAO,EAAG,IAA0D,MAA5CxI,EAASwI,OAAOxI,EAAS6C,OAAS,EAAG,SAEvEzC,KAAKmN,MAAMvN,GACtB,MAAOoO,MAGNpO,SAAWA,WAIX0E,EAAKoG,OAAOvK,EAAM0B,IAEhBK,MACAzC,EAAOU,EAAK+B,OAId1C,EAAQW,OAKVT,OAASqN,IACTjN,QAAUiN,IACVK,QAAUL,WAIRzN,KAAKwD,iBAAiB,UAAWwK,KAGrCc,UACJ,MACF5M,KAAK,SAAUC,YACT4M,YAAcZ,EAAOY,WAAWC,YAAYb,GAC5ChM,IACNQ,MAAM,SAAUR,YACV4M,YAAcZ,EAAOY,WAAWC,YAAYb,GAC5ChM,0BAMCX,WACNX,SACAkH,EAAQ,EACJlH,EAAOI,KAAKuF,MAAMuB,WAEnBlH,EAAKuG,WAEH,GAAI5F,IAAWP,KAAKkG,QAAS,IAC9BlG,KAAKkK,WAAalK,KAAKgO,QAAWhO,KAAKkK,YAAclK,KAAK0F,SAASC,YAGlE/F,EAAKW,QAAWX,EAAK+B,OAAU/B,EAAKwG,cAClC+D,OAAOvK,GAAQW,QAAQ,SAG1BX,EAAKW,aACF4J,OAAOvK,GAAQW,QAAQ,SAIX,IAAnBP,KAAKkK,iBACF3J,QAAS,uBAKR0N,OACJ1G,EAAK0G,KACJjO,KAAK0F,SAASG,SAKf7F,KAAKkO,yBAEIZ,oBAAoB,YAAatN,KAAKmO,aAAa,YACnDb,oBAAoB,YAAatN,KAAKoO,aAAa,YACnDd,oBAAoB,OAAQtN,KAAKqO,gBAAgB,QACrDH,YAAYZ,oBAAoB,WAAYtN,KAAKsO,YAAY,QAC7DJ,YAAYZ,oBAAoB,OAAQtN,KAAKuO,QAAQ,GAC1D,MAAOlK,IAINkD,EAEoB,iBAAPA,IACXpC,SAASqJ,cAAcjH,IAAOvH,KAAKyO,MAAM9J,IAAI6J,cAAcjH,IAChD,IAAPA,MACJvH,KAAKuE,QAAQI,QAJb,OAOFuJ,YAAc3G,EAEfvH,KAAKkO,uBACE3L,iBAAiB,YAAavC,KAAKmO,aAAa,YAChD5L,iBAAiB,YAAavC,KAAKoO,aAAa,YAChD7L,iBAAiB,OAAQvC,KAAKqO,gBAAgB,QAClDH,YAAY3L,iBAAiB,WAAYvC,KAAKsO,YAAY,QAC1DJ,YAAY3L,iBAAiB,OAAQvC,KAAKuO,QAAQ,2BAK/ClK,KACR4I,iBACGjN,KAAK0O,kBACHA,YAAa,yBAIVrK,KACR4I,kBACwB,SAAtB5I,EAAEI,OAAOkK,UAAsC,IAAdtK,EAAEuK,SAA+B,IAAdvK,EAAEwK,UAAkBxK,EAAEyK,aAAezK,EAAE0K,SAAW,UACnGL,YAAa,wBAIXrK,KACP4I,iDAIGyB,YAAa,mBAGbrK,KACH4I,sBACG+B,gBAAgB3K,EAAEiE"}